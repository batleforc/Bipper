basePath: /api
definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  model.Channel:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        type: integer
      messages:
        items:
          $ref: '#/definitions/model.Message'
        type: array
      name:
        type: string
      owner:
        type: integer
      passKey:
        description: crypted field (can be regenerated) and empty if public
        type: string
      picture:
        type: string
      private:
        type: boolean
      updatedAt:
        type: string
      users:
        items:
          $ref: '#/definitions/model.ChannelUser'
        type: array
    type: object
  model.ChannelUser:
    properties:
      canMod:
        type: boolean
      canRead:
        type: boolean
      canSend:
        type: boolean
      channelID:
        type: integer
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      updatedAt:
        type: string
      userID:
        type: integer
    type: object
  model.Message:
    properties:
      channelID:
        type: integer
      content:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      updatedAt:
        type: string
      userID:
        type: integer
    type: object
  model.User:
    properties:
      channels:
        items:
          $ref: '#/definitions/model.ChannelUser'
        type: array
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: integer
      myChannels:
        items:
          $ref: '#/definitions/model.Channel'
        type: array
      name:
        type: string
      picture:
        type: string
      pseudo:
        type: string
      role:
        type: string
      surname:
        type: string
      updatedAt:
        type: string
    type: object
  route.LoginBody:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  route.LoginReturn:
    properties:
      access_token:
        type: string
      pseudo:
        type: string
      renew_token:
        type: string
      role:
        type: string
    type: object
  route.LogoutBody:
    properties:
      renew_token:
        type: string
    type: object
  route.RegisterBody:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      pseudo:
        type: string
      surname:
        type: string
    type: object
  route.RegisterReturn:
    properties:
      error:
        type: boolean
      message:
        type: string
      registered:
        type: boolean
    type: object
  route.RenewTokenBody:
    properties:
      renew_token:
        type: string
    type: object
  route.RenewTokenReturn:
    properties:
      access_token:
        type: string
      pseudo:
        type: string
      role:
        type: string
    type: object
info:
  contact:
    email: maxleriche.60@gmail.com
    name: Batleforc
    url: https://weebo.fr
  description: Bipper api
  title: Bipper Api
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login user
      parameters:
      - description: Login body
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/route.LoginBody'
      responses:
        "200":
          description: Login return
          schema:
            $ref: '#/definitions/route.LoginReturn'
      summary: Login user
      tags:
      - Auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout user
      parameters:
      - description: Logout body
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/route.LogoutBody'
      responses: {}
      summary: Logout user
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register User, Email has to be Unique and valid, Pseudo has to
        be Unique and > 3 characters, Password has to be > 8 characters, Name and
        surname has to be > 2 characters
      parameters:
      - description: Register body
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/route.RegisterBody'
      responses:
        "200":
          description: Register return
          schema:
            $ref: '#/definitions/route.RegisterReturn'
      summary: Register User
      tags:
      - Auth
  /auth/renew:
    post:
      consumes:
      - application/json
      description: Renew Token via refresh token
      parameters:
      - description: Renew body
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/route.RenewTokenBody'
      responses:
        "200":
          description: Renew return
          schema:
            $ref: '#/definitions/route.RenewTokenReturn'
      summary: Renew Token
      tags:
      - Auth
  /user:
    get:
      description: Get user
      responses:
        "200":
          description: user return
          schema:
            $ref: '#/definitions/model.User'
      security:
      - BearerAuth: []
      summary: Get user
      tags:
      - Auth
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
