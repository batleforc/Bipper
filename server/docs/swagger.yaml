basePath: /api
definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  model.Channel:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      owner:
        type: integer
      picture:
        type: string
      private:
        type: boolean
      updatedAt:
        type: string
      users:
        items:
          $ref: '#/definitions/model.ChannelUser'
        type: array
    type: object
  model.ChannelUser:
    properties:
      canMod:
        type: boolean
      canRead:
        type: boolean
      canSend:
        type: boolean
      channelID:
        type: integer
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/model.PublicUser'
      userID:
        type: integer
    type: object
  model.Message:
    properties:
      channelID:
        type: integer
      content:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      updatedAt:
        type: string
      userID:
        type: integer
    type: object
  model.PublicUser:
    properties:
      email:
        type: string
      name:
        type: string
      picture:
        type: string
      pseudo:
        type: string
      role:
        type: string
      surname:
        type: string
    type: object
  model.User:
    properties:
      channels:
        items:
          $ref: '#/definitions/model.ChannelUser'
        type: array
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: integer
      myChannels:
        items:
          $ref: '#/definitions/model.Channel'
        type: array
      name:
        type: string
      picture:
        type: string
      pseudo:
        type: string
      role:
        type: string
      surname:
        type: string
      updatedAt:
        type: string
    type: object
  route.CheckChanNameBody:
    properties:
      name:
        type: string
    type: object
  route.CheckChanNameReturn:
    properties:
      available:
        type: boolean
      error:
        type: boolean
      message:
        type: string
    type: object
  route.CreateChanBody:
    properties:
      description:
        type: string
      name:
        type: string
      picture:
        type: string
      private:
        type: boolean
    type: object
  route.CreateChanReturn:
    properties:
      error:
        type: boolean
      message:
        type: string
      passkey:
        type: string
      updated:
        type: boolean
    type: object
  route.GetOneChanReturn:
    properties:
      error:
        type: boolean
      message:
        type: string
    type: object
  route.LoginBody:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  route.LoginReturn:
    properties:
      access_token:
        type: string
      pseudo:
        type: string
      renew_token:
        type: string
      role:
        type: string
    type: object
  route.LogoutBody:
    properties:
      renew_token:
        type: string
    type: object
  route.RegisterBody:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      pseudo:
        type: string
      surname:
        type: string
    type: object
  route.RegisterReturn:
    properties:
      error:
        type: boolean
      message:
        type: string
      registered:
        type: boolean
    type: object
  route.RenewChanPasswordReturn:
    properties:
      error:
        type: boolean
      message:
        type: string
      updated:
        type: boolean
    type: object
  route.RenewTokenBody:
    properties:
      renew_token:
        type: string
    type: object
  route.RenewTokenReturn:
    properties:
      access_token:
        type: string
      pseudo:
        type: string
      role:
        type: string
    type: object
  route.SetPictureReturn:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  route.SetUserBody:
    properties:
      name:
        type: string
      surname:
        type: string
    type: object
  route.SetUserReturn:
    properties:
      error:
        type: boolean
      message:
        type: string
      updated:
        type: boolean
    type: object
info:
  contact:
    email: maxleriche.60@gmail.com
    name: Batleforc
    url: https://weebo.fr
  description: Bipper api
  title: Bipper Api
  version: "1.0"
paths:
  /asset/{fileName}:
    get:
      description: Serve static asset
      parameters:
      - description: fileName
        in: path
        name: fileName
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            type: file
      summary: Serve static asset
      tags:
      - Asset
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login user
      parameters:
      - description: Login body
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/route.LoginBody'
      responses:
        "200":
          description: Login return
          schema:
            $ref: '#/definitions/route.LoginReturn'
      summary: Login user
      tags:
      - Auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout user
      parameters:
      - description: Logout body
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/route.LogoutBody'
      responses: {}
      summary: Logout user
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register User, Email has to be Unique and valid, Pseudo has to
        be Unique and > 3 characters, Password has to be > 8 characters, Name and
        surname has to be > 2 characters
      parameters:
      - description: Register body
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/route.RegisterBody'
      responses:
        "200":
          description: Register return
          schema:
            $ref: '#/definitions/route.RegisterReturn'
      summary: Register User
      tags:
      - Auth
  /auth/renew:
    post:
      consumes:
      - application/json
      description: Renew Token via refresh token
      parameters:
      - description: Renew body
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/route.RenewTokenBody'
      responses:
        "200":
          description: Renew return
          schema:
            $ref: '#/definitions/route.RenewTokenReturn'
      summary: Renew Token
      tags:
      - Auth
  /chan:
    post:
      consumes:
      - application/json
      description: Create channel, Name has to be unique
      parameters:
      - description: Create channel body
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/route.CreateChanBody'
      responses:
        "200":
          description: Create channel return
          schema:
            $ref: '#/definitions/route.CreateChanReturn'
        "400":
          description: Create channel return
          schema:
            $ref: '#/definitions/route.CreateChanReturn'
        "500":
          description: Create channel return
          schema:
            $ref: '#/definitions/route.CreateChanReturn'
      security:
      - BearerAuth: []
      summary: Create channel
      tags:
      - Chan
  /chan/{chanId}:
    get:
      consumes:
      - application/json
      description: Get One Channel by id
      parameters:
      - description: Channel id
        in: path
        name: chanId
        required: true
        type: string
      responses:
        "200":
          description: Channel
          schema:
            $ref: '#/definitions/model.Channel'
        "400":
          description: Chan Id is not valid
          schema:
            $ref: '#/definitions/route.GetOneChanReturn'
        "403":
          description: User is not in channel
          schema:
            $ref: '#/definitions/route.GetOneChanReturn'
        "500":
          description: Error while getting channel, (can be normal if not exist)
          schema:
            $ref: '#/definitions/route.GetOneChanReturn'
      security:
      - BearerAuth: []
      summary: Get One Channel by id
      tags:
      - Chan
  /chan/{chanId}/message:
    get:
      consumes:
      - application/json
      description: Get One Channel message by id, if user not in chan can't see message
      parameters:
      - description: Channel id
        in: path
        name: chanId
        required: true
        type: string
      - description: Limit of message
        in: query
        name: limit
        type: integer
      - description: Page of message
        in: query
        name: page
        type: integer
      responses:
        "200":
          description: message
          schema:
            items:
              $ref: '#/definitions/model.Message'
            type: array
        "400":
          description: Chan Id is not valid
          schema:
            $ref: '#/definitions/route.GetOneChanReturn'
        "403":
          description: User is not in channel
          schema:
            $ref: '#/definitions/route.GetOneChanReturn'
        "500":
          description: Error while getting channel, (can be normal if not exist)
          schema:
            $ref: '#/definitions/route.GetOneChanReturn'
      security:
      - BearerAuth: []
      summary: Get One Channel message by id
      tags:
      - Chan
  /chan/{chanId}/renew:
    post:
      consumes:
      - application/json
      description: Reset channel password
      parameters:
      - description: Channel id
        in: path
        name: chanId
        required: true
        type: string
      responses:
        "200":
          description: Reset channel password return
          schema:
            $ref: '#/definitions/route.RenewChanPasswordReturn'
      security:
      - BearerAuth: []
      summary: Reset channel password
      tags:
      - Chan
  /chan/name:
    post:
      consumes:
      - application/json
      description: Check if channel name is available
      parameters:
      - description: Check channel name body
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/route.CheckChanNameBody'
      responses:
        "200":
          description: Chann available or not
          schema:
            $ref: '#/definitions/route.CheckChanNameReturn'
        "400":
          description: Body not valid
          schema:
            $ref: '#/definitions/route.CheckChanNameReturn'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/route.CheckChanNameReturn'
      security:
      - BearerAuth: []
      summary: Check if channel name is available
      tags:
      - Chan
  /chan/public:
    get:
      consumes:
      - application/json
      description: Get Public channel
      parameters:
      - description: Channel id
        in: path
        name: chanId
        required: true
        type: string
      - description: Limit of Channel
        in: query
        name: limit
        type: integer
      - description: Search in Channel
        in: query
        name: search
        type: integer
      - description: Page of Channel
        in: query
        name: page
        type: integer
      responses:
        "200":
          description: Channel
          schema:
            items:
              $ref: '#/definitions/model.Channel'
            type: array
        "500":
          description: Error while getting channel
          schema:
            $ref: '#/definitions/route.GetOneChanReturn'
      security:
      - BearerAuth: []
      summary: Get Public channel
      tags:
      - Chan
  /user:
    get:
      description: Get user
      responses:
        "200":
          description: user return
          schema:
            $ref: '#/definitions/model.User'
      security:
      - BearerAuth: []
      summary: Get user
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Set user
      parameters:
      - description: Set user body
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/route.SetUserBody'
      responses:
        "200":
          description: Set user return
          schema:
            $ref: '#/definitions/route.SetUserReturn'
      security:
      - BearerAuth: []
      summary: Set user
      tags:
      - User
  /user/setpicture:
    post:
      consumes:
      - multipart/form-data
      description: SetPicture user
      parameters:
      - description: .jpeg, .png, .gif
        in: formData
        name: file
        required: true
        type: file
      responses:
        "200":
          description: SetPicture return
          schema:
            $ref: '#/definitions/route.SetPictureReturn'
      security:
      - BearerAuth: []
      summary: SetPicture user
      tags:
      - User
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
