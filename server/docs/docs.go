// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Batleforc",
            "url": "https://weebo.fr",
            "email": "maxleriche.60@gmail.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Login user",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "Login body",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/route.LoginBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login return",
                        "schema": {
                            "$ref": "#/definitions/route.LoginReturn"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "description": "Logout user",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Logout user",
                "parameters": [
                    {
                        "description": "Logout body",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/route.LogoutBody"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/auth/register": {
            "post": {
                "description": "Register User, Email has to be Unique and valid, Pseudo has to be Unique and \u003e 3 characters, Password has to be \u003e 8 characters, Name and surname has to be \u003e 2 characters",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register User",
                "parameters": [
                    {
                        "description": "Register body",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/route.RegisterBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Register return",
                        "schema": {
                            "$ref": "#/definitions/route.RegisterReturn"
                        }
                    }
                }
            }
        },
        "/auth/renew": {
            "post": {
                "description": "Renew Token via refresh token",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Renew Token",
                "parameters": [
                    {
                        "description": "Renew body",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/route.RenewTokenBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Renew return",
                        "schema": {
                            "$ref": "#/definitions/route.RenewTokenReturn"
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get user",
                "tags": [
                    "Auth"
                ],
                "summary": "Get user",
                "responses": {
                    "200": {
                        "description": "user return",
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "gorm.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        },
        "model.Channel": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Message"
                    }
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "integer"
                },
                "passKey": {
                    "description": "crypted field (can be regenerated) and empty if public",
                    "type": "string"
                },
                "picture": {
                    "type": "string"
                },
                "private": {
                    "type": "boolean"
                },
                "updatedAt": {
                    "type": "string"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ChannelUser"
                    }
                }
            }
        },
        "model.ChannelUser": {
            "type": "object",
            "properties": {
                "canMod": {
                    "type": "boolean"
                },
                "canRead": {
                    "type": "boolean"
                },
                "canSend": {
                    "type": "boolean"
                },
                "channelID": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "model.Message": {
            "type": "object",
            "properties": {
                "channelID": {
                    "type": "integer"
                },
                "content": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "model.User": {
            "type": "object",
            "properties": {
                "channels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ChannelUser"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "myChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Channel"
                    }
                },
                "name": {
                    "type": "string"
                },
                "picture": {
                    "type": "string"
                },
                "pseudo": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "surname": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "route.LoginBody": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "route.LoginReturn": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "pseudo": {
                    "type": "string"
                },
                "renew_token": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "route.LogoutBody": {
            "type": "object",
            "properties": {
                "renew_token": {
                    "type": "string"
                }
            }
        },
        "route.RegisterBody": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "pseudo": {
                    "type": "string"
                },
                "surname": {
                    "type": "string"
                }
            }
        },
        "route.RegisterReturn": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "boolean"
                },
                "message": {
                    "type": "string"
                },
                "registered": {
                    "type": "boolean"
                }
            }
        },
        "route.RenewTokenBody": {
            "type": "object",
            "properties": {
                "renew_token": {
                    "type": "string"
                }
            }
        },
        "route.RenewTokenReturn": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "pseudo": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Bipper Api",
	Description:      "Bipper api",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
